<%= content_for(:title, t('.title')) %>
<div class="bg-custom_color3 sm:py-5 lg:py-5">
  <div class="min-h-screen pt-20 md:px-8 mx-auto">
    <div class="relative">
      <%= render 'form', plan: @plan %>
    </div>
  </div>
</div>

<style>
  #map {
    height: 100%;
    min-height: 550px;
    width: 100%;
  }

   @media (min-width: 640px) {
    #map {
      min-height: 900px;
    }
  }
</style>

 <script>
  let map
  let geocoder
  let markerPoint = [];

  function initMap(){
    geocoder = new google.maps.Geocoder()

    map = new google.maps.Map(document.getElementById('map'), {
      center: {lat: 36.204824, lng: 138.252924}, // 日本の位置を初期値とする
      zoom: 2.7,
      zoomControl: false,
      mapTypeControl: false,
      scaleControl: false,
      streetViewControl: false,
      rotateControl: false,
      fullscreenControl: false
    });
  }

  function putCode(){
    return new Promise((resolve, reject) => {
      let country_name;
      let contry_latitude;
      let country_longitude;
      let inputAddress = document.getElementById('address').value;
      let add = document.getElementById('add');

      geocoder.geocode({ 'address': inputAddress }, function(results, status) {
        if (status == 'OK') {
          // map.setCenter(results[0].geometry.location); 取得したマーカーを中心にセットし直してしまうので、コメントアウト
          //マーカーを作成する。
          let marker = new google.maps.Marker({
            map: map,
            position: results[0].geometry.location
          });

          //マーカーを配列に追加する
          markerPoint.push(marker);
          country_name = results[0].formatted_address.split(/、|\s/, 1);
          country_latitude = results[0].geometry.location.lat();
          country_longitude = results[0].geometry.location.lng();

          //f.field_forのフォームに動的に追加している cocoon_vanilla_jsと連動しているため、この書き方とした
          add.outerHTML = `<a id="add" class="btn btn-secondary hover hover:link add_fields" data-association-insertion-node="#detail-association-insertion-point" data-association-insertion-method="append" data-association="country" data-associations="countries" data-association-insertion-template="<div id='country_fields' class= 'nested-fields flex flex-row w-full max-w-xs'>
            <input placeholder=&quot;country_name&quot; class=&quot;country_name input input-ghost w-full max-w-xs&quot; readonly=&quot;true&quot; type=&quot;text&quot; name=&quot;plan[countries_attributes][new_countries][name]&quot; id=&quot;plan_countries_attributes_new_countries_name&quot; value=&quot;${country_name}&quot; />
            <div onclick='deleteMarker()' class='ml-2'>
              <input value=&quot;false&quot; autocomplete=&quot;off&quot; type=&quot;hidden&quot; name=&quot;plan[countries_attributes][new_countries][_destroy]&quot; id=&quot;plan_countries_attributes_new_countries__destroy&quot; />
              <a class=&quot;btn btn-secondary rounded-lg hover:link  remove_fields dynamic&quot; href=&quot;#&quot;>削除</a>
            </div>
            <div class='hidden'>
              <input placeholder=&quot;latitude&quot; class=&quot;latitude &quot; type=&quot;text&quot; name=&quot;plan[countries_attributes][new_countries][latitude]&quot; id=&quot;plan_countries_attributes_new_countries_latitude&quot; value=&quot;${country_latitude}&quot; />
              <input placeholder=&quot;longitude&quot; class=&quot;longitude &quot; type=&quot;text&quot; name=&quot;plan[countries_attributes][new_countries][longitude]&quot; id=&quot;plan_countries_attributes_new_countries_longitude&quot; value=&quot;${country_longitude}&quot; />
            </div>
          </div>
          " href="#">add</a>`;
          resolve();
        } else {
          reject(alert('該当する結果がありませんでした：' + status));
        }
      });
    })
    .then(() => {
      setTimeout(() => {
        document.getElementById('add').click();
      },200);
    })
    .then(() => {
      setTimeout(() => {
        document.getElementById('address').value ='';
        document.getElementById('add').outerHTML = `<a id="add" class="btn btn-secondary hover hover:link add_fields" data-association-insertion-node="#detail-association-insertion-point" data-association-insertion-method="append" data-association="country" data-associations="countries" data-association-insertion-template="<div id='country_fields' class= 'nested-fields flex flex-row w-full max-w-xs'>
          <input placeholder=&quot;country_name&quot; class=&quot;country_name input input-ghost w-full max-w-xs &quot; readonly=&quot;true&quot; type=&quot;text&quot; name=&quot;plan[countries_attributes][new_countries][name]&quot; id=&quot;plan_countries_attributes_new_countries_name&quot; value=&quot;&quot; />
          <div onclick='deleteMarker()' class='ml-2'>
            <input value=&quot;false&quot; autocomplete=&quot;off&quot; type=&quot;hidden&quot; name=&quot;plan[countries_attributes][new_countries][_destroy]&quot; id=&quot;plan_countries_attributes_new_countries__destroy&quot; />
            <a class=&quot;btn btn-secondary rounded-lg hover:link  remove_fields dynamic&quot; href=&quot;#&quot;>削除</a>
          </div>
          <div class='hidden'>
            <input placeholder=&quot;latitude&quot; class=&quot;latitude &quot; type=&quot;text&quot; name=&quot;plan[countries_attributes][new_countries][latitude]&quot; id=&quot;plan_countries_attributes_new_countries_latitude&quot; value=&quot;&quot; />
            <input placeholder=&quot;longitude&quot; class=&quot;longitude &quot; type=&quot;text&quot; name=&quot;plan[countries_attributes][new_countries][longitude]&quot; id=&quot;plan_countries_attributes_new_countries_longitude&quot; value=&quot;&quot; />
          </div>
        </div>
        " href="#">add</a>`; }
      , 200)
    })
  }

  function deleteMarker(){

    let clickedElement = event.target;
    let latitude = clickedElement.parentNode.parentNode.children[2].firstElementChild.value;  // latitude
    let longitude = clickedElement.parentNode.parentNode.children[2].children[1].value;  // longitude

    for(let i =0; i < markerPoint.length; i++){
      let lat = markerPoint[i].getPosition().lat();
      let lng = markerPoint[i].getPosition().lng();

      if((lat == latitude)&&(lng == longitude)){
        markerPoint[i].setMap(null);
        markerPoint.splice(i,1);
        return;
      }
    }
  }

</script>
<script src="https://maps.googleapis.com/maps/api/js?key=<%= ENV['GOOGLE_API_KEY'] %>&callback=initMap&libraries=places&language=ja" async defer>
</script> 
