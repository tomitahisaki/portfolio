<%= content_for(:title, t('.title')) %>
<div class="bg-custom_color3 sm:py-5 lg:py-5">
  <div class="min-h-screen pt-20 md:px-8 mx-auto">
    <div class="relative">
      <%= render 'form', plan: @plan %>
    </div>
  </div>
</div>

<style>
  #map {
    height: 900px;
    width: 100%;
  }
</style>

 <script>
  let map
  let geocoder
  let markerPoint = [];

  function initMap(){
    geocoder = new google.maps.Geocoder()

    map = new google.maps.Map(document.getElementById('map'), {
      center: {lat: 36.204824, lng: 138.252924}, // 日本の位置を初期値とする
      zoom: 2.7,
      zoomControl: false,
      mapTypeControl: false,
      scaleControl: false,
      streetViewControl: false,
      rotateControl: false,
      fullscreenControl: false
    });
  }

  function codeAddress(){
    let country_name
    let contry_latitude
    let country_longitude
    let inputAddress = document.getElementById('address').value;
    let add = document.getElementById('add');

    geocoder.geocode( { 'address': inputAddress}, function(results, status) {
      if (status == 'OK') {
        // map.setCenter(results[0].geometry.location); 取得したマーカーを中心にセットし直してしまうので、コメントアウト
        let marker = new google.maps.Marker({
            map: map,
            position: results[0].geometry.location
        });

        markerPoint.push(marker);
        country_name = results[ 0 ].formatted_address.split(/、|\s/, 1);
        country_latitude = results[ 0 ].geometry.location.lat();
        country_longitude = results[ 0 ].geometry.location.lng();
        // console.log(marker); marker の情報を取得するため

        add.outerHTML = `<a id="add" class="btn btn-secondary hover hover:link add_fields" data-association-insertion-node="#detail-association-insertion-point" data-association-insertion-method="append" data-association="country" data-associations="countries" data-association-insertion-template="<div id='country_fields' class= 'nested-fields flex flex-row w-auto'><input placeholder=&quot;country_name&quot; class=&quot;country_name text-black bg-gray-300 underline&quot; type=&quot;text&quot; name=&quot;plan[countries_attributes][new_countries][name]&quot; id=&quot;plan_countries_attributes_new_countries_name&quot; value=&quot;${country_name}&quot; /><div onclick='deleteMarker()'><input value=&quot;false&quot; autocomplete=&quot;off&quot; type=&quot;hidden&quot; name=&quot;plan[countries_attributes][new_countries][_destroy]&quot; id=&quot;plan_countries_attributes_new_countries__destroy&quot; /><a class=&quot;btn btn-ghost round text-black text-semibold hover:link hover:bg-gray-400 hover:text-white remove_fields dynamic&quot; href=&quot;#&quot;>削除</a></div><div class='hidden'><input placeholder=&quot;latitude&quot; class=&quot;latitude &quot; type=&quot;text&quot; name=&quot;plan[countries_attributes][new_countries][latitude]&quot; id=&quot;plan_countries_attributes_new_countries_latitude&quot; value=&quot;${country_latitude}&quot; /><input placeholder=&quot;longitude&quot; class=&quot;longitude &quot; type=&quot;text&quot; name=&quot;plan[countries_attributes][new_countries][longitude]&quot; id=&quot;plan_countries_attributes_new_countries_longitude&quot; value=&quot;${country_longitude}&quot; /></div></div>" href="#">add</a>`;
      } else {
        alert('該当する結果がありませんでした：' + status);
      }
    });
  }

  function putCode(){
    let promise = new Promise((resolve) => {
     resolve(codeAddress());
    })
    .then(() => {
      setTimeout(() => {
        document.getElementById('add').click();
      },200);
    })
    .then(() => {
      setTimeout(() => {
        document.getElementById('address').value ='';
        document.getElementById('add').outerHTML = `<a id="add" class="btn btn-secondary hover hover:link add_fields" data-association-insertion-node="#detail-association-insertion-point" data-association-insertion-method="append" data-association="country" data-associations="countries" data-association-insertion-template="<div id='country_fields' class= 'nested-fields flex flex-row w-auto'><input placeholder=&quot;country_name&quot; class=&quot;country_name text-black bg-gray-300 underline&quot; type=&quot;text&quot; name=&quot;plan[countries_attributes][new_countries][name]&quot; id=&quot;plan_countries_attributes_new_countries_name&quot; value=&quot;$&quot; /> <div onclick='deleteMarker()'><input value=&quot;false&quot; autocomplete=&quot;off&quot; type=&quot;hidden&quot; name=&quot;plan[countries_attributes][new_countries][_destroy]&quot; id=&quot;plan_countries_attributes_new_countries__destroy&quot; /><a class=&quot;btn btn-ghost round text-black text-semibold hover:link hover:bg-gray-400 hover:text-white remove_fields dynamic&quot; href=&quot;#&quot;>削除</a></div><div class='hidden'><input placeholder=&quot;latitude&quot; class=&quot;latitude &quot; type=&quot;text&quot; name=&quot;plan[countries_attributes][new_countries][latitude]&quot; id=&quot;plan_countries_attributes_new_countries_latitude&quot; value=&quot;$&quot; /><input placeholder=&quot;longitude&quot; class=&quot;longitude &quot; type=&quot;text&quot; name=&quot;plan[countries_attributes][new_countries][longitude]&quot; id=&quot;plan_countries_attributes_new_countries_longitude&quot; value=&quot;$&quot; /></div></div>" href="#">add</a>`; },200)
    });
  }

  function deleteMarker(){

    let clickedElement = event.target;
    let latitude = clickedElement.parentNode.parentNode.children[2].firstElementChild.value;  // latitude
    let longitude = clickedElement.parentNode.parentNode.children[2].children[1].value;  // longitude

    for(let i =0; i < markerPoint.length; i++){
      let lat = markerPoint[i].getPosition().lat();
      let lng = markerPoint[i].getPosition().lng();

      if((lat == latitude)&&(lng == longitude)){
        markerPoint[i].setMap(null);
        markerPoint.splice(i,1);
        return;
      }
    }
  }

</script>
<script src="https://maps.googleapis.com/maps/api/js?key=<%= ENV['GOOGLE_API_KEY'] %>&callback=initMap&libraries=places&language=ja" async defer>
</script> 
